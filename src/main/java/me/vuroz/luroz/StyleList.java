package me.vuroz.luroz;

import java.util.HashMap;
import java.util.Map;

public class StyleList {

	public static Map<String, Map<Character, String>> styles = new HashMap<String, Map<Character, String>>();

	public static void initialize() {
		char a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, aU, bU, cU, dU, eU, fU, gU,
				hU, iU, jU, kU, lU, mU, nU, oU, pU, qU, rU, sU, tU, uU, vU, wU, xU, yU, zU, zero, one, two, three, four,
				five, six, seven, eight, nine, space, dot, comma, hash, apostrophe, quotation, exclamation, question,
				ampersand, plus, minus, slash, backslash, underscore, line, colon, semicolon, at, asterisk, dollar,
				percent, parenthesisLeft, parenthesisRight, less, equal, more, bracketLeft, bracketRight, curlyLeft,
				curlyRight, tilde, pound;
		a = 'a';
		b = 'b';
		c = 'c';
		d = 'd';
		e = 'e';
		f = 'f';
		g = 'g';
		h = 'h';
		i = 'i';
		j = 'j';
		k = 'k';
		l = 'l';
		m = 'm';
		n = 'n';
		o = 'o';
		p = 'p';
		q = 'q';
		r = 'r';
		s = 's';
		t = 't';
		u = 'u';
		v = 'v';
		w = 'w';
		x = 'x';
		y = 'y';
		z = 'z';
		aU = 'A';
		bU = 'B';
		cU = 'C';
		dU = 'D';
		eU = 'E';
		fU = 'F';
		gU = 'G';
		hU = 'H';
		iU = 'I';
		jU = 'J';
		kU = 'K';
		lU = 'L';
		mU = 'M';
		nU = 'N';
		oU = 'O';
		pU = 'P';
		qU = 'Q';
		rU = 'R';
		sU = 'S';
		tU = 'T';
		uU = 'U';
		vU = 'V';
		wU = 'W';
		xU = 'X';
		yU = 'Y';
		zU = 'Z';
		zero  = '0';
		one   = '1';
		two   = '2';
		three = '3';
		four  = '4';
		five  = '5';
		six   = '6';
		seven = '7';
		eight = '8';
		nine  = '9';
		space       = ' ';
		dot         = '.';
		comma       = ',';
		hash        = '#';
		apostrophe  = '\'';
		quotation   = '"';
		exclamation = '!';
		question    = '?';
		ampersand   = '&';
		plus        = '+';
		minus       = '-';
		slash       = '/';
		backslash   = '\\';
		underscore  = '_';
		line        = '|';
		colon       = ':';
		semicolon   = ';';
		at          = '@';
		asterisk    = '*';
		dollar      = '$';
		percent     = '%';
		parenthesisLeft  = '(';
		parenthesisRight = ')';
		less         = '<';
		equal        = '=';
		more         = '>';
		bracketLeft  = '[';
		bracketRight = ']';
		curlyLeft    = '{';
		curlyRight   = '}';
		tilde        = '~';
		pound        = 'Â£';

		Map<Character, String> circle = new HashMap<Character, String>();
		circle.put(a, "\u24D0");
		circle.put(b, "\u24D1");
		circle.put(c, "\u24D2");
		circle.put(d, "\u24D3");
		circle.put(e, "\u24D4");
		circle.put(f, "\u24D5");
		circle.put(g, "\u24D6");
		circle.put(h, "\u24D7");
		circle.put(i, "\u24D8");
		circle.put(j, "\u24D9");
		circle.put(k, "\u24DA");
		circle.put(l, "\u24DB");
		circle.put(m, "\u24DC");
		circle.put(n, "\u24DD");
		circle.put(o, "\u24DE");
		circle.put(p, "\u24DF");
		circle.put(q, "\u24E0");
		circle.put(r, "\u24E1");
		circle.put(s, "\u24E2");
		circle.put(t, "\u24E3");
		circle.put(u, "\u24E4");
		circle.put(v, "\u24E5");
		circle.put(w, "\u24E6");
		circle.put(x, "\u24E7");
		circle.put(y, "\u24E8");
		circle.put(z, "\u24E9");
		circle.put(aU, "\u24B6");
		circle.put(bU, "\u24B7");
		circle.put(cU, "\u24B8");
		circle.put(dU, "\u24B9");
		circle.put(eU, "\u24BA");
		circle.put(fU, "\u24BB");
		circle.put(gU, "\u24BC");
		circle.put(hU, "\u24BD");
		circle.put(iU, "\u24BE");
		circle.put(jU, "\u24BF");
		circle.put(kU, "\u24C0");
		circle.put(lU, "\u24C1");
		circle.put(mU, "\u24C2");
		circle.put(nU, "\u24C3");
		circle.put(oU, "\u24C4");
		circle.put(pU, "\u24C5");
		circle.put(qU, "\u24C6");
		circle.put(rU, "\u24C7");
		circle.put(sU, "\u24C8");
		circle.put(tU, "\u24C9");
		circle.put(uU, "\u24CA");
		circle.put(vU, "\u24CB");
		circle.put(wU, "\u24CC");
		circle.put(xU, "\u24CD");
		circle.put(yU, "\u24CE");
		circle.put(zU, "\u24CF");
		circle.put(zero,  "\u24EA");
		circle.put(one,   "\u2460");
		circle.put(two,   "\u2461");
		circle.put(three, "\u2462");
		circle.put(four,  "\u2463");
		circle.put(five,  "\u2464");
		circle.put(six,   "\u2465");
		circle.put(seven, "\u2466");
		circle.put(eight, "\u2467");
		circle.put(nine,  "\u2468");

		styles.put("circle", circle);

		Map<Character, String> square = new HashMap<Character, String>();
		square.put(a, "\uD83C\uDD30");
		square.put(b, "\uD83C\uDD31");
		square.put(c, "\uD83C\uDD32");
		square.put(d, "\uD83C\uDD33");
		square.put(e, "\uD83C\uDD34");
		square.put(f, "\uD83C\uDD35");
		square.put(g, "\uD83C\uDD36");
		square.put(h, "\uD83C\uDD37");
		square.put(i, "\uD83C\uDD38");
		square.put(j, "\uD83C\uDD39");
		square.put(k, "\uD83C\uDD3A");
		square.put(l, "\uD83C\uDD3B");
		square.put(m, "\uD83C\uDD3C");
		square.put(n, "\uD83C\uDD3D");
		square.put(o, "\uD83C\uDD3E");
		square.put(p, "\uD83C\uDD3F");
		square.put(q, "\uD83C\uDD40");
		square.put(r, "\uD83C\uDD41");
		square.put(s, "\uD83C\uDD42");
		square.put(t, "\uD83C\uDD43");
		square.put(u, "\uD83C\uDD44");
		square.put(v, "\uD83C\uDD45");
		square.put(w, "\uD83C\uDD46");
		square.put(x, "\uD83C\uDD47");
		square.put(y, "\uD83C\uDD48");
		square.put(z, "\uD83C\uDD49");
		square.put(aU, "\uD83C\uDD30");
		square.put(bU, "\uD83C\uDD31");
		square.put(cU, "\uD83C\uDD32");
		square.put(dU, "\uD83C\uDD33");
		square.put(eU, "\uD83C\uDD34");
		square.put(fU, "\uD83C\uDD35");
		square.put(gU, "\uD83C\uDD36");
		square.put(hU, "\uD83C\uDD37");
		square.put(iU, "\uD83C\uDD38");
		square.put(jU, "\uD83C\uDD39");
		square.put(kU, "\uD83C\uDD3A");
		square.put(lU, "\uD83C\uDD3B");
		square.put(mU, "\uD83C\uDD3C");
		square.put(nU, "\uD83C\uDD3D");
		square.put(oU, "\uD83C\uDD3E");
		square.put(pU, "\uD83C\uDD3F");
		square.put(qU, "\uD83C\uDD40");
		square.put(rU, "\uD83C\uDD41");
		square.put(sU, "\uD83C\uDD42");
		square.put(tU, "\uD83C\uDD43");
		square.put(uU, "\uD83C\uDD44");
		square.put(vU, "\uD83C\uDD45");
		square.put(wU, "\uD83C\uDD46");
		square.put(xU, "\uD83C\uDD47");
		square.put(yU, "\uD83C\uDD48");
		square.put(zU, "\uD83C\uDD49");

		styles.put("square", square);

		Map<Character, String> fraktur = new HashMap<Character, String>();
		fraktur.put(a, "\uD835\uDD1E");
		fraktur.put(b, "\uD835\uDD1F");
		fraktur.put(c, "\uD835\uDD20");
		fraktur.put(d, "\uD835\uDD21");
		fraktur.put(e, "\uD835\uDD22");
		fraktur.put(f, "\uD835\uDD23");
		fraktur.put(g, "\uD835\uDD24");
		fraktur.put(h, "\uD835\uDD25");
		fraktur.put(i, "\uD835\uDD26");
		fraktur.put(j, "\uD835\uDD27");
		fraktur.put(k, "\uD835\uDD28");
		fraktur.put(l, "\uD835\uDD29");
		fraktur.put(m, "\uD835\uDD2A");
		fraktur.put(n, "\uD835\uDD2B");
		fraktur.put(o, "\uD835\uDD2C");
		fraktur.put(p, "\uD835\uDD2D");
		fraktur.put(q, "\uD835\uDD2E");
		fraktur.put(r, "\uD835\uDD2F");
		fraktur.put(s, "\uD835\uDD30");
		fraktur.put(t, "\uD835\uDD31");
		fraktur.put(u, "\uD835\uDD32");
		fraktur.put(v, "\uD835\uDD33");
		fraktur.put(w, "\uD835\uDD34");
		fraktur.put(x, "\uD835\uDD35");
		fraktur.put(y, "\uD835\uDD36");
		fraktur.put(z, "\uD835\uDD37");
		fraktur.put(aU, "\uD835\uDD04");
		fraktur.put(bU, "\uD835\uDD05");
		fraktur.put(cU, "\u212D"      );
		fraktur.put(dU, "\uD835\uDD07");
		fraktur.put(eU, "\uD835\uDD08");
		fraktur.put(fU, "\uD835\uDD09");
		fraktur.put(gU, "\uD835\uDD0A");
		fraktur.put(hU, "\u210C"      );
		fraktur.put(iU, "\u2111"      );
		fraktur.put(jU, "\uD835\uDD0D");
		fraktur.put(kU, "\uD835\uDD0E");
		fraktur.put(lU, "\uD835\uDD0F");
		fraktur.put(mU, "\uD835\uDD10");
		fraktur.put(nU, "\uD835\uDD11");
		fraktur.put(oU, "\uD835\uDD12");
		fraktur.put(pU, "\uD835\uDD13");
		fraktur.put(qU, "\uD835\uDD14");
		fraktur.put(rU, "\u211C"      );
		fraktur.put(sU, "\uD835\uDD16");
		fraktur.put(tU, "\uD835\uDD17");
		fraktur.put(uU, "\uD835\uDD18");
		fraktur.put(vU, "\uD835\uDD19");
		fraktur.put(wU, "\uD835\uDD1A");
		fraktur.put(xU, "\uD835\uDD1B");
		fraktur.put(yU, "\uD835\uDD1C");
		fraktur.put(zU, "\u2128"      );

		styles.put("fraktur", fraktur);

		Map<Character, String> retro = new HashMap<Character, String>();
		retro.put(a, "\uFF41");
		retro.put(b, "\uFF42");
		retro.put(c, "\uFF43");
		retro.put(d, "\uFF44");
		retro.put(e, "\uFF45");
		retro.put(f, "\uFF46");
		retro.put(g, "\uFF47");
		retro.put(h, "\uFF48");
		retro.put(i, "\uFF49");
		retro.put(j, "\uFF4A");
		retro.put(k, "\uFF4B");
		retro.put(l, "\uFF4C");
		retro.put(m, "\uFF4D");
		retro.put(n, "\uFF4E");
		retro.put(o, "\uFF4F");
		retro.put(p, "\uFF50");
		retro.put(q, "\uFF51");
		retro.put(r, "\uFF52");
		retro.put(s, "\uFF53");
		retro.put(t, "\uFF54");
		retro.put(u, "\uFF55");
		retro.put(v, "\uFF56");
		retro.put(w, "\uFF57");
		retro.put(x, "\uFF58");
		retro.put(y, "\uFF59");
		retro.put(z, "\uFF5A");
		retro.put(aU, "\uFF21");
		retro.put(bU, "\uFF22");
		retro.put(cU, "\uFF23");
		retro.put(dU, "\uFF24");
		retro.put(eU, "\uFF25");
		retro.put(fU, "\uFF26");
		retro.put(gU, "\uFF27");
		retro.put(hU, "\uFF28");
		retro.put(iU, "\uFF29");
		retro.put(jU, "\uFF2A");
		retro.put(kU, "\uFF2B");
		retro.put(lU, "\uFF2C");
		retro.put(mU, "\uFF2D");
		retro.put(nU, "\uFF2E");
		retro.put(oU, "\uFF2F");
		retro.put(pU, "\uFF30");
		retro.put(qU, "\uFF31");
		retro.put(rU, "\uFF32");
		retro.put(sU, "\uFF33");
		retro.put(tU, "\uFF34");
		retro.put(uU, "\uFF35");
		retro.put(vU, "\uFF36");
		retro.put(wU, "\uFF37");
		retro.put(xU, "\uFF38");
		retro.put(yU, "\uFF39");
		retro.put(zU, "\uFF3A");
		retro.put(zero,  "\uFF10");
		retro.put(one,   "\uFF11");
		retro.put(two,   "\uFF12");
		retro.put(three, "\uFF13");
		retro.put(four,  "\uFF14");
		retro.put(five,  "\uFF15");
		retro.put(six,   "\uFF16");
		retro.put(seven, "\uFF17");
		retro.put(eight, "\uFF18");
		retro.put(nine,  "\uFF19");
		retro.put(space,       "\u3000");
		retro.put(dot,         "\uFF0E");
		retro.put(comma,       "\uFF0C");
		retro.put(hash,        "\uFF03");
		retro.put(apostrophe,  "\uFF07");
		retro.put(quotation,   "\uFF02");
		retro.put(exclamation, "\uFF01");
		retro.put(question,    "\uFF1F");
		retro.put(ampersand,   "\uFF06");
		retro.put(plus,        "\uFF0B");
		retro.put(minus,       "\uFF0D");
		retro.put(slash,       "\uFF0F");
		retro.put(backslash,   "\uFF3C");
		retro.put(underscore,  "\uFF3F");
		retro.put(line,        "\uFF5C");
		retro.put(colon,       "\uFF1A");
		retro.put(semicolon,   "\uFF1B");
		retro.put(at,          "\uFF20");
		retro.put(asterisk,    "\uFF0A");
		retro.put(dollar,      "\uFF04");
		retro.put(percent,     "\uFF05");
		retro.put(parenthesisLeft,  "\uFF08");
		retro.put(parenthesisRight, "\uFF09");
		retro.put(less,         "\uFF1C");
		retro.put(equal,        "\uFF1D");
		retro.put(more,         "\uFF1E");
		retro.put(bracketLeft,  "\uFF3B");
		retro.put(bracketRight, "\uFF3D");
		retro.put(curlyLeft,    "\uFF5B");
		retro.put(curlyRight,   "\uFF5D");
		retro.put(tilde,        "\uFF5E");
		retro.put(pound,        "\uFFE1");

		styles.put("retro", retro);
		
		Map<Character, String> small = new HashMap<Character, String>();
		small.put(a, "\u1D43");
		small.put(b, "\u1D47");
		small.put(c, "\u1D9C");
		small.put(d, "\u1D48");
		small.put(e, "\u1D49");
		small.put(f, "\u1DA0");
		small.put(g, "\u1D4D");
		small.put(h, "\u02B0");
		small.put(i, "\u2071");
		small.put(j, "\u02B2");
		small.put(k, "\u1D4F");
		small.put(l, "\u02E1");
		small.put(m, "\u1D50");
		small.put(n, "\u207F");
		small.put(o, "\u1D52");
		small.put(p, "\u1D56");
		small.put(r, "\u02B3");
		small.put(s, "\u02E2");
		small.put(t, "\u1D57");
		small.put(u, "\u1D58");
		small.put(v, "\u1D5B");
		small.put(w, "\u02B7");
		small.put(x, "\u02E3");
		small.put(y, "\u02B8");
		small.put(z, "\u1DBB");
		small.put(aU, "\u1D2C");
		small.put(bU, "\u1D2E");
		small.put(dU, "\u1D30");
		small.put(eU, "\u1D31");
		small.put(gU, "\u1D33");
		small.put(hU, "\u1D34");
		small.put(iU, "\u1D35");
		small.put(jU, "\u1D36");
		small.put(kU, "\u1D37");
		small.put(lU, "\u1D38");
		small.put(mU, "\u1D39");
		small.put(nU, "\u1D3A");
		small.put(oU, "\u1D3C");
		small.put(pU, "\u1D3E");
		small.put(rU, "\u1D3F");
		small.put(tU, "\u1D40");
		small.put(uU, "\u1D41");
		small.put(vU, "\u2C7D");
		small.put(wU, "\u1D42");

		styles.put("small", small);
	}

}
